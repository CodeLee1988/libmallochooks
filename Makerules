BUILD_MALLOC_HOOKS ?= noop
MALLOC_HOOKS_METHOD ?= preload

# add the path of this makefile to vpath
# (since we assume we're being included from the build dir)
THIS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

vpath %.c  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.o  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.a  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.so $(dir $(realpath $(THIS_MAKEFILE)))

CFLAGS += -I$(dir $(realpath $(THIS_MAKEFILE)))
$(warning CFLAGS is $(CFLAGS))

%_fast.c: %.c
	cp "$<" "$@"
%_$(MALLOC_HOOKS_METHOD)_hooks.c: %_hooks.c
	cp "$<" "$@"

HOOKS_INCLUDE_DEF := -DMALLOC_HOOKS_INCLUDE=\"malloc_hooks_$(MALLOC_HOOKS_METHOD).c\"

.SECONDARY: $(BUILD_MALLOC_HOOKS)_$(MALLOC_HOOKS_METHOD)_hooks_fast.c
$(BUILD_MALLOC_HOOKS)_$(MALLOC_HOOKS_METHOD)_hooks_fast.o: CFLAGS += $(FAST_CFLAGS) $(HOOKS_INCLUDE_DEF)
.SECONDARY: $(BUILD_MALLOC_HOOKS)_$(MALLOC_HOOKS_METHOD)_hooks.c
$(BUILD_MALLOC_HOOKS)_$(MALLOC_HOOKS_METHOD)_hooks.o: CFLAGS += $(NON_FAST_CFLAGS) $(HOOKS_INCLUDE_DEF)

comma := ,

# We understand at least three hooking methods.
# 1. Use glibc's hook infrastructure
# 2. LD_PRELOAD a shared library containing malloc, free et al. 
# 3. static-link an object defining malloc, free et al.
#
# Option 2 is tricky because we have to use dlsym to get the
# underlying malloc, free etc.. And dlsym calls malloc! To
# get around this, we include a configurable chunk of bss that
# supports an early_malloc, early_free etc.. Only when our
# dlsym has succeeded do we switch to using the real malloc.

# Set global linker options appropriate for the method we're using.
ifeq ($(MALLOC_HOOKS_METHOD),wrap)

# Modify the including Makefile's LDFLAGS so that 
# - malloc and friends are --wrap'ped
# - for good measure (FIXME: why?) define __real_* to be aliases of the unprefixed
# - (recall: --wrap only affects the undefined symbols in any given linker input file)

LDFLAGS += $(prefix -Wl$(comma)--wrap$(comma),malloc calloc free realloc memalign posix_memalign)
LDFLAGS += $(prefix -Wl$(comma),\
--defsym __real_malloc=malloc \
--defsym __real_calloc=calloc \
--defsym __real_free=free \
--defsym __real_realloc=realloc \
--defsym __real_memalign=memalign \
--defsym __real_posix_memalign=posix_memalign)

# We don't know whether the user wants fast or "normal" hooks, so don't modify ldlibs
# LDLIBS += 

else
ifeq ($(MALLOC_HOOKS_METHOD),preload)

# don't modify the linker flags, 
# but DO rename our [first] hooks to their rightful names.
# How? 

else
ifeq ($(MALLOC_HOOKS_METHOD),glibc)

# glibc implies building a preloadable library

endif # glibc
endif # preload
endif # wrap

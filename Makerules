# whitespace-separated: can have more than one
BUILD_MALLOC_HOOKS ?= noop
# must have exactly one method!
MALLOC_HOOKS_METHOD ?= preload

# add the path of this makefile to vpath
# (since we assume we're being included from the build dir)
THIS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

vpath %.c  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.o  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.a  $(dir $(realpath $(THIS_MAKEFILE)))
vpath %.so $(dir $(realpath $(THIS_MAKEFILE)))

CFLAGS += -I$(dir $(realpath $(THIS_MAKEFILE)))

ifeq ($(FAST_CFLAGS),)
FAST_CFLAGS += -O -flto
endif
ifeq ($(NON_FAST_CFLAGS),)
NON_FAST_CFLAGS += -O0
endif

$(warning CFLAGS is $(CFLAGS))

%_fast.c: %.c
	cp "$<" "$@"

# object files for the individual hooks can be built fast- or non-fast
.SECONDARY: $(patsubst %,%_hooks_fast.c,$(BUILD_MALLOC_HOOKS))
$(patsubst %,%_hooks_fast.o,$(BUILD_MALLOC_HOOKS)): CFLAGS += $(FAST_CFLAGS)
$(patsubst %,%_hooks.o,$(BUILD_MALLOC_HOOKS)): CFLAGS += $(NON_FAST_CFLAGS)

# the object file for the overall ensemble can also be built fast- or non-fast
.SECONDARY: malloc_hook_stubs_$(MALLOC_HOOKS_METHOD)_fast.c
malloc_hook_stubs_$(MALLOC_HOOKS_METHOD)_fast.o: CFLAGS += $(FAST_CFLAGS)
malloc_hook_stubs_$(MALLOC_HOOKS_METHOD).o: CFLAGS += $(NON_FAST_CFLAGS)

# building the actual hooks
# FIXME: iterative version for multiple hooks
malloc_hooks_$(MALLOC_HOOKS_METHOD).o: malloc_hook_stubs_$(MALLOC_HOOKS_METHOD).o $(patsubst %.c,%.o,$(patsubst %,%_hooks.c,$(BUILD_MALLOC_HOOKS)))
	$(LD) -o "$@" -r malloc_hook_stubs_$(MALLOC_HOOKS_METHOD).o  \
	--defsym __next_hook_malloc=__terminal_hook_malloc \
	--defsym __next_hook_realloc=__terminal_hook_realloc \
	--defsym __next_hook_free=__terminal_hook_free \
	--defsym __next_hook_memalign=__terminal_hook_memalign \
	$(patsubst %.c,%.o,$(patsubst %,%_hooks.c,$(BUILD_MALLOC_HOOKS)))
malloc_hooks_$(MALLOC_HOOKS_METHOD)_fast.o: malloc_hook_stubs_$(MALLOC_HOOKS_METHOD)_fast.o $(patsubst %_fast.c,%_fast.o,$(patsubst %,%_hooks_fast.c,$(BUILD_MALLOC_HOOKS)))
	$(LD) -o "$@" -r malloc_hook_stubs_$(MALLOC_HOOKS_METHOD)_fast.o  \
	--defsym __next_hook_malloc=__terminal_hook_malloc \
	--defsym __next_hook_realloc=__terminal_hook_realloc \
	--defsym __next_hook_free=__terminal_hook_free \
	--defsym __next_hook_memalign=__terminal_hook_memalign \
	$(patsubst %_fast.c,%_fast.o,$(patsubst %,%_hooks_fast.c,$(BUILD_MALLOC_HOOKS)))

comma := ,

# We understand at least three hooking methods.
# 1. Use glibc's hook infrastructure
# 2. LD_PRELOAD a shared library containing malloc, free et al. 
# 3. static-link an object defining malloc, free et al.
#
# Option 2 is tricky because we have to use dlsym to get the
# underlying malloc, free etc.. And dlsym calls malloc! To
# get around this, we include a configurable chunk of bss that
# supports an early_malloc, early_free etc.. Only when our
# dlsym has succeeded do we switch to using the real malloc.

# Set global linker options appropriate for the method we're using.
ifeq ($(MALLOC_HOOKS_METHOD),wrap)

# Modify the including Makefile's LDFLAGS so that 
# - malloc and friends are --wrap'ped
# - for good measure (FIXME: why?) define __real_* to be aliases of the unprefixed
# - (recall: --wrap only affects the undefined symbols in any given linker input file)

LDFLAGS += $(prefix -Wl$(comma)--wrap$(comma),malloc calloc free realloc memalign posix_memalign)
LDFLAGS += $(prefix -Wl$(comma),\
--defsym __real_malloc=malloc \
--defsym __real_calloc=calloc \
--defsym __real_free=free \
--defsym __real_realloc=realloc \
--defsym __real_memalign=memalign \
--defsym __real_posix_memalign=posix_memalign)

# We don't know whether the user wants fast or "normal" hooks, so don't modify ldlibs
# LDLIBS += 

else
ifeq ($(MALLOC_HOOKS_METHOD),preload)

# don't modify the linker flags, 
# but DO rename our [first] hooks to their rightful names.
# How? 

else
ifeq ($(MALLOC_HOOKS_METHOD),glibc)

# glibc implies building a preloadable library

endif # glibc
endif # preload
endif # wrap
